name: Commit Stage  # The name of the workflow
on: push            # The workflow is triggered when new code is pushed to the repository.

env:
  REGISTRY: ghcr.io  # Uses the GitHub Container Registry
  IMAGE_NAME: anatolyageev/catalog-service # The name of the image. Remember to add your GitHub username, all in lowercase.
  VERSION: latest # For the moment, any new image will be tagged as “latest”.

jobs:
  build:
    name: Build and Test      # The job’s unique identifier
    runs-on: ubuntu-22.04     # The type of machine where the job should be run
    permissions:              # The permissions granted to the job
      contents: read          # Permission to check out the current Git repository
      security-events: write  # Permission to submit security events to GitHub
    steps:
      - name: Checkout source code # Checks out the current Git repository (catalog-service)
        uses: actions/checkout@v4  #
      - name: Set up JDK              # Installs and configures a Java runtime
        uses: actions/setup-java@v4   #
        with:                         # Defines which version, distribution, and cache type to use
          distribution: temurin       #
          java-version: 17            #
          cache: gradle               #
      - name: Build, unit tests and integration tests # Ensures the Gradle wrapper is executable, solving Windows incompatibilities
        run: |                                        # Runs the Gradle build task, which compiles the codebase and runs unit and integration tests
          chmod +x gradlew
          ./gradlew build
      - name: Code vulnerability scanning
        uses: anchore/scan-action@v3  # Scans the codebase for vulnerabilities using grype
        id: scan                      # Assigns an identifier to the current step so that it can be referenced from subsequent steps
        with:
          path: "${{ github.workspace }}"  # The path to the checked-out repository
          fail-build: false                # Whether to fail the build in the event of security vulnerabilities
          severity-cutoff: high            # The minimum security category to be considered as an error (low, medium, high, critical)
      - name: Upload vulnerability report             # Whether to enable the generation of a report after the scan is completed
        uses: github/codeql-action/upload-sarif@v3    # Uploads the security vulnerability report to GitHub (SARIF format)
        if: success() || failure()                    # Uploads the report even if the previous step fails
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }} # Fetches the report from the output of the previous step
  package:  # The job’s unique identifier
    name: Package and Publish
    if: ${{ github.ref == 'refs/heads/main' }} # Runs the job only on the main branch
    needs: [ build ]                           # Runs the job only if the “build” job completes successfully
    runs-on: ubuntu-22.04                      # Runs the job on an Ubuntu 22.04 machine
    permissions:
      contents: read                           # Permission to check out the current Git repository
      packages: write                          # Permission to upload images to GitHub Container Registry
      security-events: write                   # Permission to submit security events to GitHub
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4              # Checks out the current Git repository (catalog-service)
      - name: Set up JDK
        uses: actions/setup-java@v4            # Installs and configures a Java runtime
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Build container image            # Relies on the Buildpacks integration in Spring Boot to build a container image and defines the name for the release candidate
        run: |
          chmod +x gradlew
          ./gradlew bootBuildImage --imageName ghcr.io/anatolyageev/catalog-service:latest
#            --imageName ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
      - name: OCI image vulnerability scanning
        uses: anchore/scan-action@v3           # Scans the release candidate image for vulnerabilities using grype
        id: scan
        with:                                  # The image to scan is the release candidate.
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          fail-build: false                    # It won’t fail the build if vulnerabilities are found in the image.
          severity-cutoff: high
      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v3  # Uploads the security vulnerability report to GitHub (SARIF format)
        if: success() || failure()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
      - name: Log into container registry
        uses: docker/login-action@v3             # Authenticates with GitHub Container Registry

      - name: Log into GitHub Container Registry with PAT
        run: echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

#        with:
#          registry: ${{ env.REGISTRY }}          # The registry value as defined in the environment variable earlier
#          username: ${{ github.actor }}          # The GitHub username of the current user, provided by GitHub Actions
#          password: ${{ secrets.GITHUB_TOKEN }}  # The token needed to authenticate with the registry, provided by GitHub Actions
      - name: Publish container image            # Pushes the release candidate to the registry
        run: docker push ghcr.io/anatolyageev/catalog-service:latest